@model IEnumerable<API.Model.Actor>
@*@model  IPagedList<API.Model.Movie> *@

@{
    ViewData["Title"] = "GetAllActors";
    Layout = "~/Views/Shared/_Layout.cshtml";

    //script in html

    Pager pager = new Pager();

    int pageNo = 0;
    if (ViewBag.Pager != null)
    {
        pager = ViewBag.Pager;
        pageNo = pager.CurrentPage;
    }
}

<div class="jumbotron bg-light bg-gradient text-secondary p-5 shadow-sm">
    <h1 class="display-4">Hello!</h1>
    <p class="lead">Learn about API using ASP.NET 6.0 EF Core (Code First Approach). </p>
    <hr class="my-4">
    <p>List with all Actors</p>
    <a class="btn btn-sm btn-outline-info  " href="https://github.com/Boghian-Gabriel/API" role="button">Learn more about this project</a>
</div>

<div class="mt-4 d-flex justify-content-between mb-1">
    <div class="d-flex">
        <input type="submit" value="Create actor" class="btn btn-primary me-2 btnStyleLeft btnStyle " onclick="location.href='@Url.Action("CreateActor", "Actor")'" />
        @*Create Report using another VIEW*@
        @*<input type="submit" value="Generate Report" class="btn btn-outline-primary btnStyle" onclick="location.href='@Url.Action("Report", "Movie")'" />*@
   @*     <form asp-action="PrintReport">
            <input type="submit" value="Generate Report" class="btn btn-outline-primary btnStyle" />
        </form>*@
    </div>
    @*@Html.ActionLink("Create new movie", "CreateMovie")*@

    @using (Html.BeginForm())
    {
        <div class="d-sm-flex input-group">
            <button class="btn btn-sm btn-secondary btnStyle" disabled="disabled" id="btnClear"><i class="bi bi-x"></i></button>
            @Html.TextBox("searchString",  ViewBag.CurrentFilter as string, new {@class="form-control inputStyle", @placeholder = "Search", @id = "txtEnter", @onkeydown="EnableDisable(this);" })
            <button class="btn btn-outline-success btnStyle" type="submit"><i class="bi bi-search"></i></button>
        </div>
    }
</div>

<table class="table table-striped shadow-sm table-responsive table-bordered">
    <thead>
        <tr>
            <th class="text-center">
                @* @Html.DisplayNameFor(model => model.Title)*@
                @Html.ActionLink("FirstName", "GetAllActors", new { sortOrder = ViewBag.FNameSortParam })
            </th>
            <th class="text-center">
                @*@Html.DisplayNameFor(model => model.Genre)*@
                @Html.ActionLink("LastName", "GetAllActors", new { sortOrder = ViewBag.LNameSortParam })
            </th>
            <th class="text-center">
                @*@Html.DisplayNameFor(model => model.RealeseDate)*@
                @Html.ActionLink("Dof", "GetAllActors", new { sortOrder = ViewBag.DofSortParam })
            </th>
            <th class="text-center">
                @*@Html.DisplayNameFor(model => model.RealeseDate)*@
                @Html.ActionLink("Email", "GetAllActors", new { sortOrder = ViewBag.EmailSortParam })
            </th>
            <th class="text-center">Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Count() != 0)
        {
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.FirsName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Dof)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td class="text-center">
                        <div class="btn-group">
                            @Html.ActionLink("Edit", "EditActor", new {  id=item.Id }, new { @class="btn btn-primary btnStyle" })
                            @Html.ActionLink("Details", "GetActor", new { id=item.Id }, new { @class="btn btn-success btnStyle" })
                            @Html.ActionLink("Delete", "DeleteActor", new {  id=item.Id }, new { @class="btn btn-danger btnStyle" })
                        </div>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td class="text-center text-danger" colspan="4">
                    Nu exista informatii in baza de date!
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="container d-flex justify-content-between">
    <p>Page @pager.CurrentPage of @pager.TotalPages</p>
    <ul class="pagination">
        @* add Previous and First*@
        @if (pager.CurrentPage > 1)
        {
            <li class="page-item">
                <a class="page-link" asp-controller="Movie" asp-action="GetAllActors" asp-route-page="1">First</a>
            </li>
            <li class="page-item">
                <a class="page-link" asp-controller="Movie" asp-action="GetAllActors" asp-route-page="@(pager.CurrentPage - 1)">Previous</a>
            </li>
        }

        @* pages between First Previous [] Next Last *@
        @for (var pge = pager.StartPage; pge <= pager.EndPage; pge++)
        {
            <li class="page-item @(pge == pager.CurrentPage ? "active" : "")">
                @*asp-route-page="@pge" -> parameter function from MovieControler and action is GetAllMovies
            page is signature from GeAllMovies
            *@
                <a class="page-link" asp-controller="Actor" asp-action="GetAllActors" asp-route-page="@pge">@pge</a>
            </li>
        }

        @* add Next and Last*@
        @if (pager.CurrentPage < pager.TotalPages)
        {
            <li class="page-item">
                <a class="page-link" asp-controller="Actor" asp-action="GetAllActors" asp-route-page="@(pager.CurrentPage + 1)">Next</a>
            </li>
            <li class="page-item">
                <a class="page-link" asp-controller="Actor" asp-action="GetAllActors" asp-route-page="@(pager.TotalPages)">Last</a>
            </li>
        }
    </ul>
</div>

@*Add script for clear search input field*@
<script>
    window.addEventListener('load', () => {
        const button = document.querySelector('#btnClear');
        button.addEventListener('click', () => {
            document.querySelector('#txtEnter').value = "";
        });
    });

    function EnableDisable(txtEnter) {
        //Reference the Button.
        var btnClear = document.getElementById("btnClear");
        //var btnSearch = document.getElementById("btnSearch");
        //Verify the TextBox value.
        if (txtEnter.value.trim() != "") {
            //Enable the TextBox when TextBox has value.
            btnClear.disabled = false;
            //btnSearch.disabled = false;
        } else {
            //Disable the TextBox when TextBox is empty.
            btnClear.disabled = true;
            //btnSearch.disabled = true;
        }
    };
</script>